/**
 *                                       常用正则表达式
正则表达式用于字符串处理、表单验证等场合，实用高效。现将一些常用的表达式收集于此，以备不时之需。

用户名：/^[a-z0-9_-]{3,16}$/

密码：/^[a-z0-9_-]{6,18}$/

十六进制值：/^#?([a-f0-9]{6}|[a-f0-9]{3})$/

电子邮箱：/^([a-z0-9_.-]+)@([\da-z.-]+).([a-z.]{2,6})$/

URL：/^(https?:\/\/)?([\da-z.-]+).([a-z.]{2,6})([\/\w .-])\/?$/

IP 地址：/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/

HTML 标签：/^<([a-z]+)([^<]+)(?:>(.)<\/\1>|\s+\/>)$/

Unicode 编码中的汉字范围：/^[u4e00-u9fa5],{0,}$/

匹配中文字符的正则表达式： [\u4e00-\u9fa5]
评注：匹配中文还真是个头疼的事，有了这个表达式就好办了

匹配双字节字符(包括汉字在内)：[^\x00-\xff]
评注：可以用来计算字符串的长度（一个双字节字符长度计 2，ASCII 字符计 1）

匹配空白行的正则表达式：\n\s*\r
评注：可以用来删除空白行

匹配 HTML 标记的正则表达式：<(\S?)[^>]>.?</\1>|<.? />
评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力

匹配首尾空白字符的正则表达式：^\s|\s$
评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式

匹配 Email地址的正则表达式：\w+([-+.]\w+)@\w+([-.]\w+).\w+([-.]\w+)*
评注：表单验证时很实用

匹配网址 URL 的正则表达式：[a-zA-z]+://[^\s]*
评注：网上流传的版本功能很有限，上面这个基本可以满足需求

匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$
评注：表单验证时很实用

匹配国内电话号码：\d{3}-\d{8}|\d{4}-\d{7}
评注：匹配形式如 0511-4405222 或 021-87888822

匹配腾讯 QQ 号：[1-9][0-9]{4,}
评注：腾讯QQ号从10000开始

匹配中国大陆邮政编码：[1-9]\d{5}(?!\d)
评注：中国大陆邮政编码为6位数字

匹配身份证：\d{15}|\d{18}
评注：中国大陆的身份证为 15 位或 18 位

匹配 ip 地址：\d+.\d+.\d+.\d+
评注：提取 ip 地址时有用

匹配特定数字：
^[1-9]\d*$　 　 //匹配正整数
^-[1-9]\d*$ 　 //匹配负整数
^-?[1-9]\d*$　　 //匹配整数
^[1-9]\d*|0$　 //匹配非负整数（正整数 + 0）
^-[1-9]\d*|0$　　 //匹配非正整数（负整数 + 0）
^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$　　 //匹配正浮点数
^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$　 //匹配负浮点数
^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$　 //匹配浮点数
^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$　　 //匹配非负浮点数（正浮点数 + 0）
^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$　　//匹配非正浮点数（负浮点数 + 0）
评注：处理大量数据时有用，具体应用时注意修正

匹配特定字符串：
^[A-Za-z]+$　　//匹配由26个英文字母组成的字符串
^[A-Z]+$　　//匹配由26个英文字母的大写组成的字符串
^[a-z]+$　　//匹配由26个英文字母的小写组成的字符串
^[A-Za-z0-9]+$　　//匹配由数字和26个英文字母组成的字符串
^\w+$　　//匹配由数字、26个英文字母或者下划线组成的字符串



//--------------------------------常见正则表达式----------------------------//


匹配6~10位由数字和26个英文字母混合而成的密码：
^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,10}$

解析：
^
匹配字符串的开始位置

(?![0-9]+$)
断言此位置之后，字符串结尾之前，所有的字符不能全部由数字组成

(?![a-zA-Z]+$)
断言此位置之后，字符串结尾之前，所有的字符不能全部由26个英文字母组成

[0-9A-Za-z]{6,10}
匹配整个字符串由6~10位由数字和26个英文字母混合而成

$
匹配字符串的结束位置

下面是一些常用的实例
1.匹配 “a”,"*","1" 三个字符中的任何一个
[a,\*,1]


2.匹配负整数
^-[1-9]\d*


3.验证密码，以字母开头，长度在6~18之间，只能包含字符、数字和下划线
^[a-zA-Z]\w{5,17}$


4.Email的验证
要求：(1)必须包含一个"@"
　　 (2)在"@"后面的字符串至少包含一个"."号
　　 (3)"@"前面和后面的字符串由一个或一个以上字母、数字、下划线或减号构成
^[a-zA-Z0-9_\-]{1,}@[a-zA-Z0-9_\-]{1,}\.[a-zA-Z0-9_\-.]{1,}$


5.验证InternetURL地址
^http://([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$


6.最多允许使用 40 个大写字母和小写字母
[a-zA-Z]{1,40}


7.只能输入零和非零开头的数字
^(0|[1-9][0-9]*)$


8.只能输入有两位小数的正实数
^[0-9]+(.[0-9]{2})?$


9.只能输入非零的正整数
^\+?[1-9][0-9]*$


10.只能输入由数字、26个英文字母或者下划线组成的字符串
^\w+$
^[\d|A-z|_]+$


11.匹配例如：yyyy-mm-dd或yyyy/mm/dd的日期格式
\d{4}([-/])\d{2}\1\d{2}


12. 匹配其中的数字字符串
"[\"3812662409\",\"3812633637\",\"3812627686\",\"3812651467\",\"3812628047\",\"3812650203\"]"
例如：3812662409,3812633637...
\d+

//---------------------------正则表达式知识点总结--------------------------//
正则表达式一般配合test()使用：

test() 方法用于检测一个字符串是否匹配某个模式.
如：(/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,12}$/.test(passward))
    匹配6-12个包含数字字母的字符串满足返回true,不满足返回false;
RegExpObject.test(string)   string	必需。要检测的字符串。

如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false。

调用 RegExp 对象 r 的 test() 方法，并为它传递字符串 s，与这个表示式是等价的：(r.exec(s) != null)。


一、元字符

.	匹配除换行符之外的任意字符
\w  匹配字母数字下划线，等同于：[a-zA-Z0-9_]
\s  匹配任意空白符
\d	匹配数字，等同于[0-9]
\b	匹配单词边界
|	或匹配，如 /x|y/ 正则可匹配x或y两个字符
^	匹配字符串的开始
$	匹配字符串的结束

二、反义字符

[^x]	匹配除“x”之外的所有字符，其中“x”可以为任意字符
[^xyz]	同上，匹配除“x、y、z”之外的任意字符
\W	    匹配除了字母、数字、下划线之外的所有字符，等同于：[^\w]
\S	    匹配除空白符之外的任意字符，等同于：[^\s]
\B	    匹配不是单词边界的字符，等同于：[^\b]
\D	    匹配不是数字的所有字符，等同于：[^\d]

三、转义字符

\xnn	匹配十六进制数
\f	    匹配换页符，等同于：\x0c
\n	    匹配换行符，等同于：\x0a
\r 	    匹配回车符，等同于：\x0d
\t	    匹配水平制表符，等同于：\x09
\v      匹配垂直制表符，等同于：\x0b
\unnnn	匹配Unicode字符，如：\u00A0

四、重复匹配

*       重复出现零次或多次
+	    重复出现一次或多次
？	   重复出现零次或一次
{n}	    重复出现n次
{n,}	至少重复出现n次
{m,n}	重复重现m到n次，其中，m<n

五、分组/捕获

(exp)           用小圆括号进行分组，如日期中年月日的分组：/(\d{5})-(\d{1,2})-(\d{1,2})/
                每个分组将产生分组号，从第一个括号开始，可以使用\n的形式在正则中使用分组号，
                如匹配成对出现的HTML标签，可以写成：/<(\w+)><\/\1>/
(?:exp)	        匹配exp正则，但不产生分组号
exp1(?=exp2)	前瞻断言，匹配exp1，但后面必须是exp2如匹配名字叫xianlie，但不姓zhao的人：/zhao(?=xianlie)/
exp1(?!=exp2)	后瞻断言，匹配exp1，但后面不能是exp2如匹配姓zhao，但名字不叫xianlie的人：/zhao(?!xianlie)/

六、贪婪与惰性

*?      重复任意次，但尽可能少的重复
+?	    重复一次或多次，但尽可能少的重复
??	    重复零次或一次，但尽可能少的重复
{m,n}?	重复m到n次，但尽可能少的重复
{n,}?	重复n次以上，但尽可能少的重复
{n}?    重复n次，但尽可能少的重复

七、修饰符

i   ignoreCase的缩写，表示忽略字母的大小写
m	multiline的缩写，更改^和$的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。
    (在此模式下,$的精确含意是:匹配\n之前的位置以及字符串结束前的位置.)
g	global的缩写，进行全局匹配，即对字符串进行全文匹配，直到字符串遍历结束

*/